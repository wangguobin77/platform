{"version":3,"sources":["public/jquery.treegrid.js"],"names":["$","methods","initTree","options","settings","extend","this","treegrid","defaults","each","$this","getRootNodes","apply","initNode","getTreeGridContainer","initChangeEvent","on","initEvents","removeClass","addClass","initSettingsEvents","initExpander","cell","find","get","tpl","expander","remove","prependTo","click","closest","initIndent","depth","i","insertBefore","initState","isFirstInit","tree","undefined","data","cookie","saveState","stateArrayString","stateArray","split","nodeId","inArray","push","splice","join","restoreState","getSetting","name","setSettings","getTreeContainer","setTreeContainer","container","getAllNodes","isNode","getNodeId","getParentNodeId","getParentNode","getChildNodes","getDepth","isRoot","isLeaf","length","isLast","parentNode","last","isFirst","first","isExpanded","hasClass","isCollapsed","isOneOfParentsCollapsed","expand","trigger","expandAll","expandRecursive","collapse","collapseAll","collapseRecursive","toggle","render","hide","show","renderExpander","fn","method","Array","prototype","slice","call","arguments","error","initialState","saveStateMethod","saveStateName","expanderTemplate","indentTemplate","expanderExpandedClass","expanderCollapsedClass","treeColumn","getExpander","template","test","attr","exec","getNodeById","id","treegridContainer","templateClass","result","grep","element","classNames","templateParentClass","onCollapse","onExpand","onChange","jQuery"],"mappings":"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","file":"jquery.treegrid.js","sourcesContent":["/*\r\n * jQuery treegrid Plugin 0.3.0\r\n * https://github.com/maxazan/jquery-treegrid\r\n *\r\n * Copyright 2013, Pomazan Max\r\n * Licensed under the MIT licenses.\r\n */\r\n(function($) {\r\n\r\n    var methods = {\r\n        /**\r\n         * Initialize tree\r\n         *\r\n         * @param {Object} options\r\n         * @returns {Object[]}\r\n         */\r\n        initTree: function(options) {\r\n            var settings = $.extend({}, this.treegrid.defaults, options);\r\n            return this.each(function() {\r\n                var $this = $(this);\r\n                $this.treegrid('setTreeContainer', $(this));\r\n                $this.treegrid('setSettings', settings);\r\n                settings.getRootNodes.apply(this, [$(this)]).treegrid('initNode', settings);\r\n                $this.treegrid('getRootNodes').treegrid('render');\r\n            });\r\n        },\r\n        /**\r\n         * Initialize node\r\n         *\r\n         * @param {Object} settings\r\n         * @returns {Object[]}\r\n         */\r\n        initNode: function(settings) {\r\n            return this.each(function() {\r\n                var $this = $(this);\r\n                $this.treegrid('setTreeContainer', settings.getTreeGridContainer.apply(this));\r\n                $this.treegrid('getChildNodes').treegrid('initNode', settings);\r\n                $this.treegrid('initExpander').treegrid('initIndent').treegrid('initEvents').treegrid('initState').treegrid('initChangeEvent').treegrid(\"initSettingsEvents\");\r\n            });\r\n        },\r\n        initChangeEvent: function() {\r\n            var $this = $(this);\r\n            //Save state on change\r\n            $this.on(\"change\", function() {\r\n                var $this = $(this);\r\n                $this.treegrid('render');\r\n                if ($this.treegrid('getSetting', 'saveState')) {\r\n                    $this.treegrid('saveState');\r\n                }\r\n            });\r\n            return $this;\r\n        },\r\n        /**\r\n         * Initialize node events\r\n         *\r\n         * @returns {Node}\r\n         */\r\n        initEvents: function() {\r\n            var $this = $(this);\r\n            //Default behavior on collapse\r\n            $this.on(\"collapse\", function() {\r\n                var $this = $(this);\r\n                $this.removeClass('treegrid-expanded');\r\n                $this.addClass('treegrid-collapsed');\r\n            });\r\n            //Default behavior on expand\r\n            $this.on(\"expand\", function() {\r\n                var $this = $(this);\r\n                $this.removeClass('treegrid-collapsed');\r\n                $this.addClass('treegrid-expanded');\r\n            });\r\n\r\n            return $this;\r\n        },\r\n        /**\r\n         * Initialize events from settings\r\n         *\r\n         * @returns {Node}\r\n         */\r\n        initSettingsEvents: function() {\r\n            var $this = $(this);\r\n            //Save state on change\r\n            $this.on(\"change\", function() {\r\n                var $this = $(this);\r\n                if (typeof($this.treegrid('getSetting', 'onChange')) === \"function\") {\r\n                    $this.treegrid('getSetting', 'onChange').apply($this);\r\n                }\r\n            });\r\n            //Default behavior on collapse\r\n            $this.on(\"collapse\", function() {\r\n                var $this = $(this);\r\n                if (typeof($this.treegrid('getSetting', 'onCollapse')) === \"function\") {\r\n                    $this.treegrid('getSetting', 'onCollapse').apply($this);\r\n                }\r\n            });\r\n            //Default behavior on expand\r\n            $this.on(\"expand\", function() {\r\n                var $this = $(this);\r\n                if (typeof($this.treegrid('getSetting', 'onExpand')) === \"function\") {\r\n                    $this.treegrid('getSetting', 'onExpand').apply($this);\r\n                }\r\n\r\n            });\r\n\r\n            return $this;\r\n        },\r\n        /**\r\n         * Initialize expander for node\r\n         *\r\n         * @returns {Node}\r\n         */\r\n        initExpander: function() {\r\n            var $this = $(this);\r\n            var cell = $this.find('td').get($this.treegrid('getSetting', 'treeColumn'));\r\n            var tpl = $this.treegrid('getSetting', 'expanderTemplate');\r\n            var expander = $this.treegrid('getSetting', 'getExpander').apply(this);\r\n            if (expander) {\r\n                expander.remove();\r\n            }\r\n            $(tpl).prependTo(cell).click(function() {\r\n                $($(this).closest('tr')).treegrid('toggle');\r\n            });\r\n            return $this;\r\n        },\r\n        /**\r\n         * Initialize indent for node\r\n         *\r\n         * @returns {Node}\r\n         */\r\n        initIndent: function() {\r\n            var $this = $(this);\r\n            $this.find('.treegrid-indent').remove();\r\n            var tpl = $this.treegrid('getSetting', 'indentTemplate');\r\n            var expander = $this.find('.treegrid-expander');\r\n            var depth = $this.treegrid('getDepth');\r\n            for (var i = 0; i < depth; i++) {\r\n                $(tpl).insertBefore(expander);\r\n            }\r\n            return $this;\r\n        },\r\n        /**\r\n         * Initialise state of node\r\n         *\r\n         * @returns {Node}\r\n         */\r\n        initState: function() {\r\n            var $this = $(this);\r\n            if ($this.treegrid('getSetting', 'saveState') && !$this.treegrid('isFirstInit')) {\r\n                $this.treegrid('restoreState');\r\n            } else {\r\n                if ($this.treegrid('getSetting', 'initialState') === \"expanded\") {\r\n                    $this.treegrid('expand');\r\n                } else {\r\n                    $this.treegrid('collapse');\r\n                }\r\n            }\r\n            return $this;\r\n        },\r\n        /**\r\n         * Return true if this tree was never been initialised\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isFirstInit: function() {\r\n            var tree = $(this).treegrid('getTreeContainer');\r\n            if (tree.data('first_init') === undefined) {\r\n                tree.data('first_init', $.cookie(tree.treegrid('getSetting', 'saveStateName')) === undefined);\r\n            }\r\n            return tree.data('first_init');\r\n        },\r\n        /**\r\n         * Save state of current node\r\n         *\r\n         * @returns {Node}\r\n         */\r\n        saveState: function() {\r\n            var $this = $(this);\r\n            if ($this.treegrid('getSetting', 'saveStateMethod') === 'cookie') {\r\n\r\n                var stateArrayString = $.cookie($this.treegrid('getSetting', 'saveStateName')) || '';\r\n                var stateArray = (stateArrayString === '' ? [] : stateArrayString.split(','));\r\n                var nodeId = $this.treegrid('getNodeId');\r\n\r\n                if ($this.treegrid('isExpanded')) {\r\n                    if ($.inArray(nodeId, stateArray) === -1) {\r\n                        stateArray.push(nodeId);\r\n                    }\r\n                } else if ($this.treegrid('isCollapsed')) {\r\n                    if ($.inArray(nodeId, stateArray) !== -1) {\r\n                        stateArray.splice($.inArray(nodeId, stateArray), 1);\r\n                    }\r\n                }\r\n                $.cookie($this.treegrid('getSetting', 'saveStateName'), stateArray.join(','));\r\n            }\r\n            return $this;\r\n        },\r\n        /**\r\n         * Restore state of current node.\r\n         *\r\n         * @returns {Node}\r\n         */\r\n        restoreState: function() {\r\n            var $this = $(this);\r\n            if ($this.treegrid('getSetting', 'saveStateMethod') === 'cookie') {\r\n                var stateArray = $.cookie($this.treegrid('getSetting', 'saveStateName')).split(',');\r\n                if ($.inArray($this.treegrid('getNodeId'), stateArray) !== -1) {\r\n                    $this.treegrid('expand');\r\n                } else {\r\n                    $this.treegrid('collapse');\r\n                }\r\n\r\n            }\r\n            return $this;\r\n        },\r\n        /**\r\n         * Method return setting by name\r\n         *\r\n         * @param {type} name\r\n         * @returns {unresolved}\r\n         */\r\n        getSetting: function(name) {\r\n            if (!$(this).treegrid('getTreeContainer')) {\r\n                return null;\r\n            }\r\n            return $(this).treegrid('getTreeContainer').data('settings')[name];\r\n        },\r\n        /**\r\n         * Add new settings\r\n         *\r\n         * @param {Object} settings\r\n         */\r\n        setSettings: function(settings) {\r\n            $(this).treegrid('getTreeContainer').data('settings', settings);\r\n        },\r\n        /**\r\n         * Return tree container\r\n         *\r\n         * @returns {HtmlElement}\r\n         */\r\n        getTreeContainer: function() {\r\n            return $(this).data('treegrid');\r\n        },\r\n        /**\r\n         * Set tree container\r\n         *\r\n         * @param {HtmlE;ement} container\r\n         */\r\n        setTreeContainer: function(container) {\r\n            return $(this).data('treegrid', container);\r\n        },\r\n        /**\r\n         * Method return all root nodes of tree.\r\n         *\r\n         * Start init all child nodes from it.\r\n         *\r\n         * @returns {Array}\r\n         */\r\n        getRootNodes: function() {\r\n            return $(this).treegrid('getSetting', 'getRootNodes').apply(this, [$(this).treegrid('getTreeContainer')]);\r\n        },\r\n        /**\r\n         * Method return all nodes of tree.\r\n         *\r\n         * @returns {Array}\r\n         */\r\n        getAllNodes: function() {\r\n            return $(this).treegrid('getSetting', 'getAllNodes').apply(this, [$(this).treegrid('getTreeContainer')]);\r\n        },\r\n        /**\r\n         * Mthod return true if element is Node\r\n         *\r\n         * @returns {String}\r\n         */\r\n        isNode: function() {\r\n            return $(this).treegrid('getNodeId') !== null;\r\n        },\r\n        /**\r\n         * Mthod return id of node\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getNodeId: function() {\r\n            if ($(this).treegrid('getSetting', 'getNodeId') === null) {\r\n                return null;\r\n            } else {\r\n                return $(this).treegrid('getSetting', 'getNodeId').apply(this);\r\n            }\r\n        },\r\n        /**\r\n         * Method return parent id of node or null if root node\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getParentNodeId: function() {\r\n            return $(this).treegrid('getSetting', 'getParentNodeId').apply(this);\r\n        },\r\n        /**\r\n         * Method return parent node or null if root node\r\n         *\r\n         * @returns {Object[]}\r\n         */\r\n        getParentNode: function() {\r\n            if ($(this).treegrid('getParentNodeId') === null) {\r\n                return null;\r\n            } else {\r\n                return $(this).treegrid('getSetting', 'getNodeById').apply(this, [$(this).treegrid('getParentNodeId'), $(this).treegrid('getTreeContainer')]);\r\n            }\r\n        },\r\n        /**\r\n         * Method return array of child nodes or null if node is leaf\r\n         *\r\n         * @returns {Object[]}\r\n         */\r\n        getChildNodes: function() {\r\n            return $(this).treegrid('getSetting', 'getChildNodes').apply(this, [$(this).treegrid('getNodeId'), $(this).treegrid('getTreeContainer')]);\r\n        },\r\n        /**\r\n         * Method return depth of tree.\r\n         *\r\n         * This method is needs for calculate indent\r\n         *\r\n         * @returns {Number}\r\n         */\r\n        getDepth: function() {\r\n            if ($(this).treegrid('getParentNode') === null) {\r\n                return 0;\r\n            }\r\n            return $(this).treegrid('getParentNode').treegrid('getDepth') + 1;\r\n        },\r\n        /**\r\n         * Method return true if node is root\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isRoot: function() {\r\n            return $(this).treegrid('getDepth') === 0;\r\n        },\r\n        /**\r\n         * Method return true if node has no child nodes\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isLeaf: function() {\r\n            return $(this).treegrid('getChildNodes').length === 0;\r\n        },\r\n        /**\r\n         * Method return true if node last in branch\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isLast: function() {\r\n            if ($(this).treegrid('isNode')) {\r\n                var parentNode = $(this).treegrid('getParentNode');\r\n                if (parentNode === null) {\r\n                    if ($(this).treegrid('getNodeId') === $(this).treegrid('getRootNodes').last().treegrid('getNodeId')) {\r\n                        return true;\r\n                    }\r\n                } else {\r\n                    if ($(this).treegrid('getNodeId') === parentNode.treegrid('getChildNodes').last().treegrid('getNodeId')) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            return false;\r\n        },\r\n        /**\r\n         * Method return true if node first in branch\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isFirst: function() {\r\n            if ($(this).treegrid('isNode')) {\r\n                var parentNode = $(this).treegrid('getParentNode');\r\n                if (parentNode === null) {\r\n                    if ($(this).treegrid('getNodeId') === $(this).treegrid('getRootNodes').first().treegrid('getNodeId')) {\r\n                        return true;\r\n                    }\r\n                } else {\r\n                    if ($(this).treegrid('getNodeId') === parentNode.treegrid('getChildNodes').first().treegrid('getNodeId')) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            return false;\r\n        },\r\n        /**\r\n         * Return true if node expanded\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isExpanded: function() {\r\n            return $(this).hasClass('treegrid-expanded');\r\n        },\r\n        /**\r\n         * Return true if node collapsed\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isCollapsed: function() {\r\n            return $(this).hasClass('treegrid-collapsed');\r\n        },\r\n        /**\r\n         * Return true if at least one of parent node is collapsed\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isOneOfParentsCollapsed: function() {\r\n            var $this = $(this);\r\n            if ($this.treegrid('isRoot')) {\r\n                return false;\r\n            } else {\r\n                if ($this.treegrid('getParentNode').treegrid('isCollapsed')) {\r\n                    return true;\r\n                } else {\r\n                    return $this.treegrid('getParentNode').treegrid('isOneOfParentsCollapsed');\r\n                }\r\n            }\r\n        },\r\n        /**\r\n         * Expand node\r\n         *\r\n         * @returns {Node}\r\n         */\r\n        expand: function() {\r\n            if (!this.treegrid('isLeaf') && !this.treegrid(\"isExpanded\")) {\r\n                this.trigger(\"expand\");\r\n                this.trigger(\"change\");\r\n                return this;\r\n            }\r\n            return this;\r\n        },\r\n        /**\r\n         * Expand all nodes\r\n         *\r\n         * @returns {Node}\r\n         */\r\n        expandAll: function() {\r\n            var $this = $(this);\r\n            $this.treegrid('getRootNodes').treegrid('expandRecursive');\r\n            return $this;\r\n        },\r\n        /**\r\n         * Expand current node and all child nodes begin from current\r\n         *\r\n         * @returns {Node}\r\n         */\r\n        expandRecursive: function() {\r\n            return $(this).each(function() {\r\n                var $this = $(this);\r\n                $this.treegrid('expand');\r\n                if (!$this.treegrid('isLeaf')) {\r\n                    $this.treegrid('getChildNodes').treegrid('expandRecursive');\r\n                }\r\n            });\r\n        },\r\n        /**\r\n         * Collapse node\r\n         *\r\n         * @returns {Node}\r\n         */\r\n        collapse: function() {\r\n            return $(this).each(function() {\r\n                var $this = $(this);\r\n                if (!$this.treegrid('isLeaf') && !$this.treegrid(\"isCollapsed\")) {\r\n                    $this.trigger(\"collapse\");\r\n                    $this.trigger(\"change\");\r\n                }\r\n            });\r\n        },\r\n        /**\r\n         * Collapse all nodes\r\n         *\r\n         * @returns {Node}\r\n         */\r\n        collapseAll: function() {\r\n            var $this = $(this);\r\n            $this.treegrid('getRootNodes').treegrid('collapseRecursive');\r\n            return $this;\r\n        },\r\n        /**\r\n         * Collapse current node and all child nodes begin from current\r\n         *\r\n         * @returns {Node}\r\n         */\r\n        collapseRecursive: function() {\r\n            return $(this).each(function() {\r\n                var $this = $(this);\r\n                $this.treegrid('collapse');\r\n                if (!$this.treegrid('isLeaf')) {\r\n                    $this.treegrid('getChildNodes').treegrid('collapseRecursive');\r\n                }\r\n            });\r\n        },\r\n        /**\r\n         * Expand if collapsed, Collapse if expanded\r\n         *\r\n         * @returns {Node}\r\n         */\r\n        toggle: function() {\r\n            var $this = $(this);\r\n            if ($this.treegrid('isExpanded')) {\r\n                $this.treegrid('collapse');\r\n            } else {\r\n                $this.treegrid('expand');\r\n            }\r\n            return $this;\r\n        },\r\n        /**\r\n         * Rendering node\r\n         *\r\n         * @returns {Node}\r\n         */\r\n        render: function() {\r\n            return $(this).each(function() {\r\n                var $this = $(this);\r\n                //if parent colapsed we hidden\r\n                if ($this.treegrid('isOneOfParentsCollapsed')) {\r\n                    $this.hide();\r\n                } else {\r\n                    $this.show();\r\n                }\r\n                if (!$this.treegrid('isLeaf')) {\r\n                    $this.treegrid('renderExpander');\r\n                    $this.treegrid('getChildNodes').treegrid('render');\r\n                }\r\n            });\r\n        },\r\n        /**\r\n         * Rendering expander depends on node state\r\n         *\r\n         * @returns {Node}\r\n         */\r\n        renderExpander: function() {\r\n            return $(this).each(function() {\r\n                var $this = $(this);\r\n                var expander = $this.treegrid('getSetting', 'getExpander').apply(this);\r\n                if (expander) {\r\n\r\n                    if (!$this.treegrid('isCollapsed')) {\r\n                        expander.removeClass($this.treegrid('getSetting', 'expanderCollapsedClass'));\r\n                        expander.addClass($this.treegrid('getSetting', 'expanderExpandedClass'));\r\n                    } else {\r\n                        expander.removeClass($this.treegrid('getSetting', 'expanderExpandedClass'));\r\n                        expander.addClass($this.treegrid('getSetting', 'expanderCollapsedClass'));\r\n                    }\r\n                } else {\r\n                    $this.treegrid('initExpander');\r\n                    $this.treegrid('renderExpander');\r\n                }\r\n            });\r\n        }\r\n    };\r\n    $.fn.treegrid = function(method) {\r\n        if (methods[method]) {\r\n            return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));\r\n        } else if (typeof method === 'object' || !method) {\r\n            return methods.initTree.apply(this, arguments);\r\n        } else {\r\n            $.error('Method with name ' + method + ' does not exists for jQuery.treegrid');\r\n        }\r\n    };\r\n    /**\r\n     *  Plugin's default options\r\n     */\r\n    $.fn.treegrid.defaults = {\r\n        initialState: 'expanded',\r\n        saveState: false,\r\n        saveStateMethod: 'cookie',\r\n        saveStateName: 'tree-grid-state',\r\n        expanderTemplate: '<span class=\"treegrid-expander\"></span>',\r\n        indentTemplate: '<span class=\"treegrid-indent\"></span>',\r\n        expanderExpandedClass: 'treegrid-expander-expanded',\r\n        expanderCollapsedClass: 'treegrid-expander-collapsed',\r\n        treeColumn: 0,\r\n        getExpander: function() {\r\n            return $(this).find('.treegrid-expander');\r\n        },\r\n        getNodeId: function() {\r\n            var template = /treegrid-([A-Za-z0-9_-]+)/;\r\n            if (template.test($(this).attr('class'))) {\r\n                return template.exec($(this).attr('class'))[1];\r\n            }\r\n            return null;\r\n        },\r\n        getParentNodeId: function() {\r\n            var template = /treegrid-parent-([A-Za-z0-9_-]+)/;\r\n            if (template.test($(this).attr('class'))) {\r\n                return template.exec($(this).attr('class'))[1];\r\n            }\r\n            return null;\r\n        },\r\n        getNodeById: function(id, treegridContainer) {\r\n            var templateClass = \"treegrid-\" + id;\r\n            return treegridContainer.find('tr.' + templateClass);\r\n        },\r\n        getChildNodes: function(id, treegridContainer) {\r\n            var templateClass = \"treegrid-parent-\" + id;\r\n            return treegridContainer.find('tr.' + templateClass);\r\n        },\r\n        getTreeGridContainer: function() {\r\n            return $(this).closest('table');\r\n        },\r\n        getRootNodes: function(treegridContainer) {\r\n            var result = $.grep(treegridContainer.find('tr'), function(element) {\r\n                var classNames = $(element).attr('class');\r\n                var templateClass = /treegrid-([A-Za-z0-9_-]+)/;\r\n                var templateParentClass = /treegrid-parent-([A-Za-z0-9_-]+)/;\r\n                return templateClass.test(classNames) && !templateParentClass.test(classNames);\r\n            });\r\n            return $(result);\r\n        },\r\n        getAllNodes: function(treegridContainer) {\r\n            var result = $.grep(treegridContainer.find('tr'), function(element) {\r\n                var classNames = $(element).attr('class');\r\n                var templateClass = /treegrid-([A-Za-z0-9_-]+)/;\r\n                return templateClass.test(classNames);\r\n            });\r\n            return $(result);\r\n        },\r\n        //Events\r\n        onCollapse: null,\r\n        onExpand: null,\r\n        onChange: null\r\n\r\n    };\r\n})(jQuery);\r\n"]}